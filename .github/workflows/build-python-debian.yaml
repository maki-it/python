name: Build Python Image
run-name: ${{ github.actor }} builds new python docker image
on:
  push:
    branches:
      - main
  schedule:
    - cron: "20 4 * * 0"

env:
  REGISTRY: ghcr.io

jobs:
  build:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3.2.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Python Version from Dockerfile
        id: get-python-version
        shell: bash
        run: |
          if [[ $(grep -oP '(?<=^FROM python:)[0-9.]*' debian.Dockerfile) =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            echo "MAJOR=${BASH_REMATCH[1]}" >> $GITHUB_ENV
            echo "MINOR=${BASH_REMATCH[2]}" >> $GITHUB_ENV
            echo "PATCH=${BASH_REMATCH[3]}" >> $GITHUB_ENV
            echo "SEMVER=$MAJOR.$MINOR.$PATCH" >> $GITHUB_ENV
          else
            exit -1
          fi

      - name: Extract metadata for the Docker image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=raw,value=latest
            type=raw,value=debian
            type=raw,prefix=debian-,value=${{ env.MAJOR }}
            type=raw,prefix=debian-,value=${{ env.MAJOR }}.${{ env.MINOR }}
            type=raw,prefix=debian-,value=${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PATCH }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./debian.Dockerfile
          build-args: |
            BASE_NAME=${{github.repository}}:debian
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
            SOURCE_URL=${{ github.server_url }}/${{ github.repository }}
          platforms: |
            linux/amd64
            linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ steps.meta.outputs.tags }}
          provenance: false  # Fix for unknown/unknown image build
          cache-from: type=gha
          cache-to: type=gha,mode=max
